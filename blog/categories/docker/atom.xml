<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | My Octopress Blog]]></title>
  <link href="http://yszheda.github.io/blog/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://yszheda.github.io/blog/"/>
  <updated>2020-05-06T20:50:53+08:00</updated>
  <id>http://yszheda.github.io/blog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建Docker私有仓库折腾记]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/08/02/setup-private-docker-registry/"/>
    <updated>2016-08-02T02:13:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/08/02/setup-private-docker-registry</id>
    <content type="html"><![CDATA[<p>最近折腾了一些Docker image，为了方便厂里其他人用，于是本渣还得折腾docker-registry搭个内网的Docker私有仓库~</p>

<p>本渣是照着<a href="https://yeasy.gitbooks.io/docker_practice/content/repository/local_repo.html">Docker —— 从入门到实践</a>做的：</p>

<pre><code>sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev
sudo pip install docker-registry
</code></pre>

<p>不过还需要再安装<code>swig</code>这个软件包才能正常安装<code>docker-registry</code>。</p>

<p>总算安装好了，但在push镜像时出现如下问题：</p>

<pre><code>server gave HTTP response to HTTPS client
</code></pre>

<p>看了<a href="https://github.com/docker/distribution/issues/1874">Docker Github上这个issue</a>和<a href="http://stackoverflow.com/questions/38695515/can-not-pull-push-images-after-update-docker-to-1-12">SOF上这个问题</a>后才明白，是由于<code>Docker</code>服务默认是采用安全连接HTTPS的，对于我们来讲用HTTPS大可不必，可以照着以下步骤修改：</p>

<ul>
<li>编辑<code>/etc/docker/daemon.json</code>:</li>
</ul>


<pre><code>{ "insecure-registries":["192.168.0.251:5000"] }
</code></pre>

<ul>
<li>重启Docker服务：</li>
</ul>


<pre><code>sudo service docker restart
</code></pre>

<p>在拉取镜像的机器上也需要做这样的配置才能成功<code>docker pull</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Docker容器来生成quick-x/cocos2d-x游戏apk包]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/07/28/dockerfile-for-building-quickx-apk/"/>
    <updated>2016-07-28T02:13:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/07/28/dockerfile-for-building-quickx-apk</id>
    <content type="html"><![CDATA[<p>前段时间本渣在做服务器端开发时，采用了<code>Docker</code>作为解决方案的一部分，最初的动机主要是想用<code>namespace</code>做环境隔离、用<code>cgroups</code>做资源限制，却也切身体会到<code>Docker</code>所带来的构建上的便利。故而本渣也回头去想之前cocos2d-x客户端的开发工作是否也能<code>Docker</code>化，很快就找到了一个很适合采用<code>Docker</code>的场景，那就是打apk包。从之前<a href="http://galoisplusplus.coding.me/blog/2014/08/03/customize-dev-environment-for-cocos2d-x/">搭建cocos2d-x游戏开发环境的博文</a>中不难发现，要搭建打包环境特别麻烦，不仅需要下一堆软件包，而且安装Android SDK和NDK时还会遇到GFW的问题。也正是因为这个缘故，我们团队只有最开始的三位老司机在开发机上搭好了这套环境，之后陆陆续续来的新人都没做过这项工作，所以平时打包也基本是在这几台开发机上。这简直太应该<code>Docker</code>化了！有了一套配好打包环境的<code>Docker</code> image，再也不用担心小鲜肉跑来要求打包、占用开发机了！而且还可以扔到服务器上去做，多省心啊！想想就excited，于是本渣马上就折腾起<code>Dockerfile</code>来了！</p>

<p>首先要确定基础镜像。本渣一开始以为，配置<code>Linux</code>下的cocos2d-x打包环境需要在执行cocos2d-x代码里的<code>build/install-deps-linux.sh</code>，而这个脚本需要用到<code>Debian</code>系的包管理器，所以就选了<code>Ubuntu</code>作为基础镜像。</p>

<p>配置apk打包环境自然少不了下载需要的软件包。<code>Ubuntu</code>的<code>apt-get install</code>会询问用户是否安装软件包，在<code>Dockerfile</code>中需要把这一交互性去掉，最好采用：</p>

<pre><code>RUN DEBIAN_FRONTEND=noninteractive apt-get install -y
</code></pre>

<p>有些人喜欢把<code>DEBIAN_FRONTEND</code>设成<code>ENV</code>，这样<code>ENV</code>下面的命令就不用重复打<code>DEBIAN_FRONTEND=noninteractive</code>：</p>

<pre><code>ENV DEBIAN_FRONTEND noninteractive
RUN apt-get install -y
</code></pre>

<p>但根据<a href="https://medium.com/@rlbaker/deploying-python-with-docker-15a472cf12a5#.5vl6ihty3">Deploying Python with Docker</a>的说法，这种做法是不推荐的，因为这会影响到容器使用，最好还是对每条需要的命令单独设置环境变量。</p>

<p>安装的几个软件包中少不了<code>Java</code>，我用的是Oracle的而非<code>openjdk</code>，所以需要用<code>add-apt-repository</code>把Oracle的ppa加上，这又需要先安装<code>add-apt-repository</code>：</p>

<pre><code># 更新软件包列表
RUN DEBIAN_FRONTEND=noninteractive apt-get update -qq

# 安装add-apt-repository
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install python-software-properties software-properties-common

# 安装Oracle Java
RUN echo "debconf shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections
RUN echo "debconf shared/accepted-oracle-license-v1-1 seen true" | debconf-set-selections
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:webupd8team/java \
    &amp;&amp; apt-get update -qq
RUN DEBIAN_FRONTEND=noninteractive apt-get -y oracle-java6-installer
</code></pre>

<p>打包还需要<code>ant</code>、之后下载SDK等需要<code>wget</code>或<code>curl</code>，这些软件包可以写在这句<code>apt-get -y</code>后面，因为我们不希望<code>Docker</code> image有太多layer。</p>

<p>接下来就是下载Android SDK和设置相应的环境变量了。Android SDK和NDK的google下载链接是被墙的，可以换成国内相关镜像的链接。本渣是先下好这些包，然后在我们内网nginx起了一个简单的静态页面，我们内部再通过这个页面去下载就灰常快了XD</p>

<pre><code># Install Android SDK
ENV ANDROID_SDK_ROOT /opt/android-sdk-linux

RUN cd /opt &amp;&amp; wget -q https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz -O android-sdk.tgz \
    &amp;&amp; tar -zxvf android-sdk.tgz \
    &amp;&amp; rm -f android-sdk.tgz

ENV PATH ${PATH}:${ANDROID_SDK_ROOT}:${ANDROID_SDK_ROOT}/tools

RUN echo y | android update sdk --no-ui --all --filter platform-tools | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter android-20 | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter build-tools-20.0.0 | grep 'package installed'
</code></pre>

<p>如果你需要用代理来绕过GFW，可以这么写：</p>

<pre><code># NOTE: google is blocked by GFW in China,
# So I use the proxy: http://android-mirror.bugly.qq.com:8080.
# You can remove `--proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s`
# in the following commands if you don't have to worry about this issue.
RUN echo y | android update sdk --no-ui --all --filter platform-tools --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter extra-android-support --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter android-20 --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter build-tools-20.0.0 --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
</code></pre>

<p>接下来就是安装Android NDK了，和SDK差不多。</p>

<pre><code># Install Android NDK
ENV ANDROID_NDK_ROOT /opt/android-ndk-r10e
ENV NDK_ROOT /opt/android-ndk-r10e

RUN cd /opt &amp;&amp; wget -q http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip -O android-ndk.zip \
    &amp;&amp; unzip -q android-ndk.zip \
    &amp;&amp; rm -f android-ndk.zip

ENV PATH ${PATH}:${ANDROID_NDK_ROOT}
</code></pre>

<p>最后别忘了清理安装的软件包：</p>

<pre><code>RUN apt-get clean
</code></pre>

<p>到了这一步，本渣就可以先把<code>Docker</code> image构建起来，把cocos2d-x代码、quick-x代码和客户端代码作为host的三个volumn挂载到<code>Docker</code> container里了。经试验发现还需要做如下配置：</p>

<ul>
<li><p>在<code>PATH</code>里加入<code>cocos2d-console/bin</code>的目录才能使用<code>cocos</code>命令。</p></li>
<li><p><code>cocos2d-console</code>需要安装<code>python</code>。</p></li>
<li><p>需要把quick-x代码所在目录配在<code>QUICK_V3_ROOT</code>环境变量中。</p></li>
<li><p>quick-x用到<code>php</code>，需要安装。</p></li>
<li><p>需要装上32位系统的软件包<code>lib32stdc++6</code>和<code>lib32z1</code>才能正常打包。</p></li>
</ul>


<p>于是本渣就可以相应地在<code>Dockerfile</code>中继续添加了，虽然试验的过程有点繁琐，但可以保证生成的<code>Docker</code> image只包含需要的软件包，让image尽可能小。</p>

<p>接下来就是如何继续优化了，例如以上需要从host挂载cocos2d-x代码和quick-x代码的volumn还是比较烦。其中我们完全没必要把整份cocos2d-x代码挂载进来，因为创建cocos2d-x项目时会把需要的源代码文件拷到项目目录里，所以我们只需要其中的<code>cocos2d-console</code>，配置好<code>cocos</code>所在的目录到环境变量<code>PATH</code>即可。最后我把<code>cocos2d-console</code>和<code>quick-x</code>的代码打包，放到之前的内网网页中，这样就有了一份只需要挂载项目代码目录就能进行apk打包的<code>Dockerfile</code>啦！</p>

<p>还记得前面所提到的cocos2d-x代码里的<code>build/install-deps-linux.sh</code>脚本吗？其实这个脚本还是有交互，所以我也把它所实现的功能挪到了<code>Dockerfile</code>中，其实也不外乎用<code>apt-get</code>下载一些软件包和下载<code>glfw</code>编译安装罢了。既然这个脚本并非必须，那么基础镜像也就不一定非要<code>Debian</code>系的系统了，小巧的<code>Alpine</code>无疑才是更理想的基础镜像。不过，目前我们主要是内网开发用，还没有压缩<code>Docker</code> image体积的需求，本渣也就不打算重新用<code>Alpine</code>折腾一遍了XD</p>

<p><strong>Update:</strong></p>

<p>我把一份通用的<code>Dockerfile</code>放到了<a href="https://github.com/yszheda/quick-x-apk-docker">Github</a>上，你也可以在Docker Hub拉取对应的<code>Docker</code>镜像：</p>

<pre><code>docker pull galoisplusplus/quick-x-apk-docker
</code></pre>

<p>这一<code>Docker</code>镜像对不采用quick-x的cocos2d-x游戏打包也是可以用的，只需要把<code>Dockerfile</code>中quick-x的部分去掉后进行构建即可。</p>
]]></content>
  </entry>
  
</feed>
