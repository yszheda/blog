<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-x | My Octopress Blog]]></title>
  <link href="http://yszheda.github.io/blog/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://yszheda.github.io/blog/"/>
  <updated>2020-05-06T20:50:53+08:00</updated>
  <id>http://yszheda.github.io/blog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建Docker私有仓库折腾记]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/08/02/setup-private-docker-registry/"/>
    <updated>2016-08-02T02:13:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/08/02/setup-private-docker-registry</id>
    <content type="html"><![CDATA[<p>最近折腾了一些Docker image，为了方便厂里其他人用，于是本渣还得折腾docker-registry搭个内网的Docker私有仓库~</p>

<p>本渣是照着<a href="https://yeasy.gitbooks.io/docker_practice/content/repository/local_repo.html">Docker —— 从入门到实践</a>做的：</p>

<pre><code>sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev
sudo pip install docker-registry
</code></pre>

<p>不过还需要再安装<code>swig</code>这个软件包才能正常安装<code>docker-registry</code>。</p>

<p>总算安装好了，但在push镜像时出现如下问题：</p>

<pre><code>server gave HTTP response to HTTPS client
</code></pre>

<p>看了<a href="https://github.com/docker/distribution/issues/1874">Docker Github上这个issue</a>和<a href="http://stackoverflow.com/questions/38695515/can-not-pull-push-images-after-update-docker-to-1-12">SOF上这个问题</a>后才明白，是由于<code>Docker</code>服务默认是采用安全连接HTTPS的，对于我们来讲用HTTPS大可不必，可以照着以下步骤修改：</p>

<ul>
<li>编辑<code>/etc/docker/daemon.json</code>:</li>
</ul>


<pre><code>{ "insecure-registries":["192.168.0.251:5000"] }
</code></pre>

<ul>
<li>重启Docker服务：</li>
</ul>


<pre><code>sudo service docker restart
</code></pre>

<p>在拉取镜像的机器上也需要做这样的配置才能成功<code>docker pull</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Docker容器来生成quick-x/cocos2d-x游戏apk包]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/07/28/dockerfile-for-building-quickx-apk/"/>
    <updated>2016-07-28T02:13:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/07/28/dockerfile-for-building-quickx-apk</id>
    <content type="html"><![CDATA[<p>前段时间本渣在做服务器端开发时，采用了<code>Docker</code>作为解决方案的一部分，最初的动机主要是想用<code>namespace</code>做环境隔离、用<code>cgroups</code>做资源限制，却也切身体会到<code>Docker</code>所带来的构建上的便利。故而本渣也回头去想之前cocos2d-x客户端的开发工作是否也能<code>Docker</code>化，很快就找到了一个很适合采用<code>Docker</code>的场景，那就是打apk包。从之前<a href="http://galoisplusplus.coding.me/blog/2014/08/03/customize-dev-environment-for-cocos2d-x/">搭建cocos2d-x游戏开发环境的博文</a>中不难发现，要搭建打包环境特别麻烦，不仅需要下一堆软件包，而且安装Android SDK和NDK时还会遇到GFW的问题。也正是因为这个缘故，我们团队只有最开始的三位老司机在开发机上搭好了这套环境，之后陆陆续续来的新人都没做过这项工作，所以平时打包也基本是在这几台开发机上。这简直太应该<code>Docker</code>化了！有了一套配好打包环境的<code>Docker</code> image，再也不用担心小鲜肉跑来要求打包、占用开发机了！而且还可以扔到服务器上去做，多省心啊！想想就excited，于是本渣马上就折腾起<code>Dockerfile</code>来了！</p>

<p>首先要确定基础镜像。本渣一开始以为，配置<code>Linux</code>下的cocos2d-x打包环境需要在执行cocos2d-x代码里的<code>build/install-deps-linux.sh</code>，而这个脚本需要用到<code>Debian</code>系的包管理器，所以就选了<code>Ubuntu</code>作为基础镜像。</p>

<p>配置apk打包环境自然少不了下载需要的软件包。<code>Ubuntu</code>的<code>apt-get install</code>会询问用户是否安装软件包，在<code>Dockerfile</code>中需要把这一交互性去掉，最好采用：</p>

<pre><code>RUN DEBIAN_FRONTEND=noninteractive apt-get install -y
</code></pre>

<p>有些人喜欢把<code>DEBIAN_FRONTEND</code>设成<code>ENV</code>，这样<code>ENV</code>下面的命令就不用重复打<code>DEBIAN_FRONTEND=noninteractive</code>：</p>

<pre><code>ENV DEBIAN_FRONTEND noninteractive
RUN apt-get install -y
</code></pre>

<p>但根据<a href="https://medium.com/@rlbaker/deploying-python-with-docker-15a472cf12a5#.5vl6ihty3">Deploying Python with Docker</a>的说法，这种做法是不推荐的，因为这会影响到容器使用，最好还是对每条需要的命令单独设置环境变量。</p>

<p>安装的几个软件包中少不了<code>Java</code>，我用的是Oracle的而非<code>openjdk</code>，所以需要用<code>add-apt-repository</code>把Oracle的ppa加上，这又需要先安装<code>add-apt-repository</code>：</p>

<pre><code># 更新软件包列表
RUN DEBIAN_FRONTEND=noninteractive apt-get update -qq

# 安装add-apt-repository
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install python-software-properties software-properties-common

# 安装Oracle Java
RUN echo "debconf shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections
RUN echo "debconf shared/accepted-oracle-license-v1-1 seen true" | debconf-set-selections
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:webupd8team/java \
    &amp;&amp; apt-get update -qq
RUN DEBIAN_FRONTEND=noninteractive apt-get -y oracle-java6-installer
</code></pre>

<p>打包还需要<code>ant</code>、之后下载SDK等需要<code>wget</code>或<code>curl</code>，这些软件包可以写在这句<code>apt-get -y</code>后面，因为我们不希望<code>Docker</code> image有太多layer。</p>

<p>接下来就是下载Android SDK和设置相应的环境变量了。Android SDK和NDK的google下载链接是被墙的，可以换成国内相关镜像的链接。本渣是先下好这些包，然后在我们内网nginx起了一个简单的静态页面，我们内部再通过这个页面去下载就灰常快了XD</p>

<pre><code># Install Android SDK
ENV ANDROID_SDK_ROOT /opt/android-sdk-linux

RUN cd /opt &amp;&amp; wget -q https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz -O android-sdk.tgz \
    &amp;&amp; tar -zxvf android-sdk.tgz \
    &amp;&amp; rm -f android-sdk.tgz

ENV PATH ${PATH}:${ANDROID_SDK_ROOT}:${ANDROID_SDK_ROOT}/tools

RUN echo y | android update sdk --no-ui --all --filter platform-tools | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter extra-android-support | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter android-20 | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter build-tools-20.0.0 | grep 'package installed'
</code></pre>

<p>如果你需要用代理来绕过GFW，可以这么写：</p>

<pre><code># NOTE: google is blocked by GFW in China,
# So I use the proxy: http://android-mirror.bugly.qq.com:8080.
# You can remove `--proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s`
# in the following commands if you don't have to worry about this issue.
RUN echo y | android update sdk --no-ui --all --filter platform-tools --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter extra-android-support --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter android-20 --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
RUN echo y | android update sdk --no-ui --all --filter build-tools-20.0.0 --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s | grep 'package installed'
</code></pre>

<p>接下来就是安装Android NDK了，和SDK差不多。</p>

<pre><code># Install Android NDK
ENV ANDROID_NDK_ROOT /opt/android-ndk-r10e
ENV NDK_ROOT /opt/android-ndk-r10e

RUN cd /opt &amp;&amp; wget -q http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip -O android-ndk.zip \
    &amp;&amp; unzip -q android-ndk.zip \
    &amp;&amp; rm -f android-ndk.zip

ENV PATH ${PATH}:${ANDROID_NDK_ROOT}
</code></pre>

<p>最后别忘了清理安装的软件包：</p>

<pre><code>RUN apt-get clean
</code></pre>

<p>到了这一步，本渣就可以先把<code>Docker</code> image构建起来，把cocos2d-x代码、quick-x代码和客户端代码作为host的三个volumn挂载到<code>Docker</code> container里了。经试验发现还需要做如下配置：</p>

<ul>
<li><p>在<code>PATH</code>里加入<code>cocos2d-console/bin</code>的目录才能使用<code>cocos</code>命令。</p></li>
<li><p><code>cocos2d-console</code>需要安装<code>python</code>。</p></li>
<li><p>需要把quick-x代码所在目录配在<code>QUICK_V3_ROOT</code>环境变量中。</p></li>
<li><p>quick-x用到<code>php</code>，需要安装。</p></li>
<li><p>需要装上32位系统的软件包<code>lib32stdc++6</code>和<code>lib32z1</code>才能正常打包。</p></li>
</ul>


<p>于是本渣就可以相应地在<code>Dockerfile</code>中继续添加了，虽然试验的过程有点繁琐，但可以保证生成的<code>Docker</code> image只包含需要的软件包，让image尽可能小。</p>

<p>接下来就是如何继续优化了，例如以上需要从host挂载cocos2d-x代码和quick-x代码的volumn还是比较烦。其中我们完全没必要把整份cocos2d-x代码挂载进来，因为创建cocos2d-x项目时会把需要的源代码文件拷到项目目录里，所以我们只需要其中的<code>cocos2d-console</code>，配置好<code>cocos</code>所在的目录到环境变量<code>PATH</code>即可。最后我把<code>cocos2d-console</code>和<code>quick-x</code>的代码打包，放到之前的内网网页中，这样就有了一份只需要挂载项目代码目录就能进行apk打包的<code>Dockerfile</code>啦！</p>

<p>还记得前面所提到的cocos2d-x代码里的<code>build/install-deps-linux.sh</code>脚本吗？其实这个脚本还是有交互，所以我也把它所实现的功能挪到了<code>Dockerfile</code>中，其实也不外乎用<code>apt-get</code>下载一些软件包和下载<code>glfw</code>编译安装罢了。既然这个脚本并非必须，那么基础镜像也就不一定非要<code>Debian</code>系的系统了，小巧的<code>Alpine</code>无疑才是更理想的基础镜像。不过，目前我们主要是内网开发用，还没有压缩<code>Docker</code> image体积的需求，本渣也就不打算重新用<code>Alpine</code>折腾一遍了XD</p>

<p><strong>Update:</strong></p>

<p>我把一份通用的<code>Dockerfile</code>放到了<a href="https://github.com/yszheda/quick-x-apk-docker">Github</a>上，你也可以在Docker Hub拉取对应的<code>Docker</code>镜像：</p>

<pre><code>docker pull galoisplusplus/quick-x-apk-docker
</code></pre>

<p>这一<code>Docker</code>镜像对不采用quick-x的cocos2d-x游戏打包也是可以用的，只需要把<code>Dockerfile</code>中quick-x的部分去掉后进行构建即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[瓦片地图注意事项]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/06/13/tips-about-tiled-map-in-quick-cocos2d-x/"/>
    <updated>2016-06-13T11:22:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/06/13/tips-about-tiled-map-in-quick-cocos2d-x</id>
    <content type="html"><![CDATA[<p>承接<a href="http://galoisplusplus.coding.me/blog/2016/06/03/math-in-staggered-tiled-map/">上一篇文章</a>，再来聊聊一些coding方面的tips：</p>

<!-- more -->


<h1><code>TileMapAtlas</code>、<code>FastTMX</code>和<code>TMXTiledMap</code>的选择</h1>

<p>我们看到cocos2d-x提供了三个和TiledMap相关的类：<code>TileMapAtlas</code>、<code>FastTMX</code>和<code>TMXTiledMap</code>，那么应该采用哪个类呢？</p>

<ul>
<li><p>首先，<code>TileMapAtlas</code>官方不建议使用。</p></li>
<li><p>剩下的两个<code>C++</code>类<code>FastTMX</code>和<code>TMXTiledMap</code>，分别绑定到<code>lua</code>的<code>ccexp.TMXTiledMap</code>和<code>cc.TMXTiledMap</code>。采用<code>FastTMX</code>的GL verts（顶点数）较少，可惜暂时不支持staggered类型。所以，staggered类型的Tiled Map只能用<code>TMXTiledMap</code>，其它类型的Tiled Map建议采用<code>FastTMX</code>。</p></li>
</ul>


<pre><code>-- NOTE: FastTMX doesn't support staggered tmx
-- ccexp.TMXTiledMap is faster, but the grid will not be displayed normally
local map = cc.TMXTiledMap:create("xxx.tmx")
</code></pre>

<h1>如何判断tile坐标超出地图区域</h1>

<p><code>FastTMX</code>和<code>TMXTiledMap</code>提供了一个方法<code>getMapSize()</code>，需要注意的是这个函数和cocos2d-x其他<code>getXXXSize</code>的函数不同，返回的大小不是以像素值为单位，而是2D地图在两个维度的tile数目。</p>

<pre><code>local function isTileInMap(map, tileCoord)
    -- NOTE: mapSize is measured in tile number
    local mapSize = map:getMapSize()

    return (tileCoord.x &gt;= 0)
    and (tileCoord.x &lt; mapSize.width)
    and (tileCoord.y &gt;= 0)
    and (tileCoord.y &lt; mapSize.height)
end
</code></pre>

<h1>如何获取tile的标记</h1>

<p><a href="http://galoisplusplus.coding.me/blog/2016/06/03/math-in-staggered-tiled-map/">上一篇文章</a>提到，对于不能放置在地图上禁止被编辑的区域，可以在相应的Tile做上标记。例如，我在Tiled Map里创建了一个叫"meta"的图层：</p>

<p>{% img /images/tiled-map/meta-layer.png %}</p>

<p>在TileSet Properties里设置一个标记"Collidable"，表示禁止被编辑：</p>

<p>{% img /images/tiled-map/tileset-properties.png %}</p>

<p>接下来就是用这个TileSet来刷图啦！</p>

<p>那么我们如何在代码中获取这个标记呢？<code>FastTMX</code>和<code>TMXTiledMap</code>提供了一个方法<code>getPropertiesForGID(GID)</code>来获取GID所对应的tile的属性。
那么新的问题又来了，<code>GID</code>这个索引又如何获取呢？还有另一个函数<code>getTileGIDAt()</code>，传入的参数就是<a href="http://galoisplusplus.coding.me/blog/2016/06/03/math-in-staggered-tiled-map/">上次</a>所讲的tile坐标啦！
现在你应该明白之前本渣为何要在那套坐标系下解决判断区域相交的问题了吧？</p>

<pre><code>local function isValidTile(map, tileCoord)
    local metaLayer = map:getLayer("meta")
    local flags = 0
    local GID, flags = metaLayer:getTileGIDAt(tileCoord, flags)
    if not GID or GID &lt;= 0 then
        return true
    end

    local property = map:getPropertiesForGID(GID)
    if property and property["Collidable"] then
        return false
    else
        return true
    end
end
</code></pre>

<h1>关于tile的坐标</h1>

<p><a href="http://galoisplusplus.coding.me/blog/2016/06/03/math-in-staggered-tiled-map/">上回</a>提到Staggered Tiled Map的坐标系，其实这套坐标还和你的配置有关。本渣采用的配置是：</p>

<p>{% img /images/tiled-map/stagger-setting.png %}</p>

<p>如果改变上述参数，那么你所得到的坐标也会不同，你不妨多试试啦～</p>

<p>另外，即使上述参数不变，但如果你需要由某一点的坐标求出它所在tile的坐标的话，还需要注意Tiled Map的Y轴tile数目（之所以是Y轴，是因为上面<code>Staggered Axis</code>设置为<code>Y</code>）的奇偶性。这里也不解释了，直接上图最直观：</p>

<p>{% imgcap /images/tiled-map/odd-height-original-coord.png &lsquo;Y轴有奇数个tile（图中是五个），这里tile个数是这么算的：从最底端的tile沿斜线算与它有一条公共边的tile、一直算到最顶端的tile，例如从坐标(0, 4)(0, 3)(1, 2)(1, 1)到没有显示的(2, 0)&rsquo; %}</p>

<p>{% imgcap /images/tiled-map/even-height-original-coord.png &lsquo;Y轴有偶数个tile（图中是六个）&rsquo; %}</p>

<h1>更多Tiled Map Properties配置</h1>

<p><code>Tile Layer Format</code>最好选择压缩的格式，这样生成的tmx文件比较小。</p>

<p>{% img /images/tiled-map/tile-layer-format.png %}</p>

<h1>关于遮挡关系的排序函数</h1>

<p><a href="http://galoisplusplus.coding.me/blog/2016/06/03/math-in-staggered-tiled-map/">上一篇文章</a>还提到建筑及装饰物之间的遮挡关系处理，本渣制定了一套规则来对建筑及装饰物做排序。需要注意的是，lua的<code>table.sort</code>要求排序函数是stable的，所以最好给每个要被比较的对象（这里就是建筑或装饰物）一个独一无二的id，对于两者“相等”这种情况就定义为比较id大小即可。</p>

<p>以下给出示例的伪代码，其中<code>building</code>就是被封装过的建筑或装饰物对象：</p>

<pre><code>local function getLineOfBuildingRegion(building)
    return {
        left = building:getRegionLeftPos(),
        right = building:getRegionRightPos(),
    }
end

local function getDistX(line)
    return line.right.x - line.left.x
end

local function getLowerPoint(line)
    if line.left.y &lt; line.right.y then
        return line.left
    else
        return line.right
    end
end

local function getHigherPoint(line)
    if line.left.y &gt; line.right.y then
        return line.left
    else
        return line.right
    end
end

local function isPointEqual(posA, posB)
    return posA.x == posB.x and posA.y == posB.y
end

local function isLineEqual(lineA, lineB)
    return isPointEqual(lineA.left, lineB.left) and isPointEqual(lineA.right, lineB.right)
end

local function getSlope(line)
    return (line.right.y - line.left.y) / (line.right.x - line.left.x)
end

local function isLineParallel(lineA, lineB)
    return getSlope(lineA) == getSlope(lineB)
end

local function isLowerThanLine(point, line)
    local y = getSlope(line) * (point.x - line.left.x) + line.left.y
    if point.y == y then
        return y &gt; getLowerPoint(line).y
    else
        return point.y &lt; y
    end
end

local function updateBuildingsZOrder(buildings)
    table.sort(buildings, function(a, b)
        if not isValidBuilding(a) then
            return false
        elseif not isValidBuilding(b) then
            return true
        end

        local lineA = getLineOfBuildingRegion(a)
        local lineB = getLineOfBuildingRegion(b)

        if getDistX(lineA) &gt; getDistX(lineB) then
            return isLowerThanLine(getLowerPoint(lineB), lineA)
        elseif getDistX(lineA) == getDistX(lineB) then
            if isLineEqual(lineA, lineB) then
                return a.id &lt; b.id
            elseif isLineParallel(lineA, lineB) then
                if getLowerPoint(lineA).y == getLowerPoint(lineB).y then
                    return a.id &lt; b.id
                else
                    return getLowerPoint(lineA).y &gt; getLowerPoint(lineB).y
                end
            else
                if getLowerPoint(lineA).y &gt; getLowerPoint(lineB).y then
                    return isLowerThanLine(getLowerPoint(lineB), lineA)
                elseif getLowerPoint(lineA).y == getLowerPoint(lineB).y then
                    if getHigherPoint(lineA).y &gt; getHigherPoint(lineB).y then
                        return isLowerThanLine(getLowerPoint(lineB), lineA)
                    elseif getHigherPoint(lineA).y == getHigherPoint(lineB).y then
                        return a.id &lt; b.id
                    else
                        return not isLowerThanLine(getLowerPoint(lineA), lineB)
                    end
                else
                    return not isLowerThanLine(getLowerPoint(lineA), lineB)
                end
            end
        else
            return not isLowerThanLine(getLowerPoint(lineA), lineB)
        end
    end)

    for i, building in ipairs(buildings) do
        building:setLocalZOrder(i)
    end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[斜45度瓦片地图（Staggered Tiled Map）里的简单数学]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/06/03/math-in-staggered-tiled-map/"/>
    <updated>2016-06-03T11:22:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/06/03/math-in-staggered-tiled-map</id>
    <content type="html"><![CDATA[<p>前段时间在做游戏的地图编辑功能，我们是在一个斜45度视角的场景上，对地图上的建筑或装饰物进行添加、移动、移除等基本操作，而且位置的改变是以网格作为最小操作单位的。本渣是用Staggered Tiled Map实现的，与垂直视角的Tiled Map不同，斜45度视角处理起来相对麻烦些，这次就聊聊其中一些跟数学相关的有趣问题。</p>

<!-- more -->


<h1>何为Staggered Tiled Map?</h1>

<p>不解释，有图有真相XD</p>

<p>{% imgcap /images/tiled-map/orthogonal.png &lsquo;Orthogonal Tiled Map&rsquo; %}</p>

<p>{% imgcap /images/tiled-map/isometric.png &lsquo;Isometric Tiled Map&rsquo; %}</p>

<p>{% imgcap /images/tiled-map/hexagonal(staggered).png &lsquo;Hexagonal Tiled Map&rsquo; %}</p>

<p>{% imgcap /images/tiled-map/staggered.png &lsquo;Staggered Tiled Map&rsquo; %}</p>

<h1>判断区域相交</h1>

<p>地图编辑的一个基础功能便是判断当前被编辑的建筑或装饰物的位置的合法性。这种合法性检查主要有两方面：一是不能放置在地图上被禁止编辑的区域（例如地图上的河流、山坡），这可以通过在Tiled Map上在相应区域做上标记，判断建筑所在的区域是否有该标记就可以了；二是不能与其他建筑或装饰物重叠，这便是这里主要要讨论的问题了。</p>

<p>在实际做位置判断时，我们并非按照每个建筑或装饰物的图片实际轮廓，而是把它们都对应到Tiled Map上一块以网格线为边的区域上——在斜45度视角下，这样的区域就是一个平行四边形。因此，建筑或装饰物是否重叠的问题便转化为在Tiled Map上的两个平行四边形是否相交的问题。再做进一步简化，我们发现这其实只需要判断任一平行四边形的四个顶点的瓦片（tile）是否落在另一个平行四边形内部就可以了。</p>

<p>看到这里，你也许已经发现：这不就是中学里简单的代数问题吗？判断点是否在平行四边形内，只需要知道平行四边形四条边所在直线的方程和点的坐标，便迎刃而解。没错，Tiled Map里每一块瓦片区域有自己的坐标，我们只需要把一块瓦片的坐标当做点的坐标，直线方程和点的坐标就有了。但斜45度角Staggered Tiled Map的有趣之处在于，即便把瓦片当做点，得到的并不是一个常见的平面直角坐标系。</p>

<p>下面我们还是通过图片来看看Staggered Tiled Map的坐标：</p>

<p>{% img /images/tiled-map/odd-height-original-coord.png %}</p>

<p>为了方便起见，我们把向下作为y轴正方向，我们可以发现上面的坐标(x, y)有着如下规律：</p>

<pre><code>-- columnNum表示列数
-- columnNum = 1, 2, 3, ...
x = (columnNum - 1) % 2


-- rowNum表示行数
-- rowNum = 1, 2, 3, ...
y = rowNum - 1
</code></pre>

<p>看上去好像不复杂，但要列出直线方程呢？比如以下两种可作为平行四边形瓦片区域的边的直线：</p>

<p>{% img /images/tiled-map/row_line.png %}</p>

<p>{% img /images/tiled-map/column_line.png %}</p>

<p>一时半会懵逼了吧？使问题复杂的正是这些公式需要判断奇偶性，能不能把奇偶性判断拿掉呢？当然可以，做坐标转换就可以了，让我们先看一张直观的坐标转换结果图：</p>

<p>{% img /images/tiled-map/odd-height-new-coord.png %}</p>

<p>这相当于做了如下的坐标转换：</p>

<pre><code>f[(x, y)] = (x * 2, y) if y mod 2 = 0

f[(x, y)] = (x * 2 + 1, y) if y mod 2 = 1
</code></pre>

<p>合并成一条公式也就是：</p>

<pre><code>f[(x, y)] = (x * 2 + y mod 2, y)
</code></pre>

<p>现在是不是简单得多了？上面两条直线方程（因为这样的直线斜率是确定的，只需要知道直线上一点的坐标就可以确定直线方程）分别是：</p>

<pre><code>-- linear equation of the row line containing the point of tileCoord
local function rowEquation(tileCoord)
    return tileCoord.x * 2 + tileCoord.y % 2 + tileCoord.y
end
</code></pre>

<pre><code>-- linear equation of the column line containing the point of tileCoord
local function columnEquation(tileCoord)
    return tileCoord.x * 2 + tileCoord.y % 2 - tileCoord.y
end
</code></pre>

<p>这个时候你应该已经发现，我们可以用之前简单的代数问题解法来解决这一问题了：已知点的坐标<code>tileCoord</code>和一个区域<code>region</code>四个顶点的坐标（分别为<code>region.top</code>、<code>region.bottom</code>、<code>region.left</code>、<code>region.right</code>，事实上只需要知道其中两个点就可以了），判断点是否在区域内，只需要做不等式判断即可：</p>

<pre><code>local function containsTile(region, tileCoord)
    return (rowEquation(tileCoord) &gt;= rowEquation(region.top))
    and (rowEquation(tileCoord) &lt;= rowEquation(region.bottom))
    and (columnEquation(tileCoord) &lt;= columnEquation(region.top))
    and (columnEquation(tileCoord) &gt;= columnEquation(region.bottom))
</code></pre>

<p>你也许会问，为什么不直接定义一套方便计算的坐标系统？为何要用Staggered Tiled Map原有的坐标系统去做变换呢？这是因为前面所提到的做标记的非法编辑区域是采用原有的坐标系统的，采用同一套坐标系统加简单的坐标转换处理比起采用两套坐标系统，在实现上和维护上的成本更低。</p>

<h1>遮挡关系</h1>

<p>地图编辑的另一个基础需求是要处理好建筑及装饰物之间的遮挡关系。这个问题可以转化为建筑或装饰物的显示层级的排序。但是问题又来了，如何比较任意两个建筑或装饰物的显示先后顺序呢？特别是它们还有可能隔得很远，并没有显示上的重叠区域？</p>

<p>这个问题其实没有固定答案，本渣也只是根据我们系统的实际情况定了一套排序规则。在本渣的规则中，建筑或装饰物的显示层级只与它们对应的平行四边形区域有关。本渣用每一个的平行四边形左侧和右侧瓦片的坐标点得到一条直线，并把平行四边形对角线交点作为基准点。当比较两个建筑或装饰物的显示先后时，先判断二者平行四边形的宽度（两条相邻边的tile数量），短的求基准点，长的求直线。如果点在直线下方，则点所对应的建筑或装饰物在前方；反之则在后方。</p>

<p>当然，本渣这套规则实际能显示正确还有赖于美术大大们提供的建筑或装饰物图片资源的情况哈，如果建筑或装饰物的轮廓宽度超过它们的平行四边形区域，还是可能会出现显示奇怪的地方的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2d-x文本类Label的一些坑]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/03/04/label-pitfalls-in-cocos2d-x/"/>
    <updated>2016-03-04T11:22:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/03/04/label-pitfalls-in-cocos2d-x</id>
    <content type="html"><![CDATA[<p>cocos2d-x v3.2的Label实现bug真是不少，前段时间恰好排查了几个与之相关的问题，在此记录一下。</p>

<h1>文字换行</h1>

<p>文字换行是一个困扰我们挺长时间的问题：之前就常常有文字超过指定长度却没有换行的情况出现，后来加入韩文、泰文等“奇葩”文字后问题就更严重了。cocos2d-x引擎在v3.2后大改了这部分的实现，但由于涉及的改动太多，无法作为一个独立的patch单独apply过来，而且更新引擎版本对我们上线的游戏代价太大，也不可行。好在本渣不久前终于从各种游戏系统开发中抽出时间，完整地把这部分代码review了一遍，结果发现全是<code>LabelTextFormatter::multilineText</code>中几行代码惹的祸，缩小了排查范围便不难fix了：</p>

<!-- more -->


<pre><code class="cpp">bool LabelTextFormatter::multilineText(Label *theLabel)
{
    auto limit = theLabel-&gt;_limitShowCount;
    auto strWhole = theLabel-&gt;_currentUTF16String;

    std::vector&lt;char16_t&gt; multiline_string;
    multiline_string.reserve( limit );

    std::vector&lt;char16_t&gt; last_word;
    last_word.reserve( 25 );

    bool   isStartOfLine  = false, isStartOfWord = false;
    float  startOfLine = -1, startOfWord   = -1;

    int skip = 0;

    int tIndex = 0;
    float scalsX = theLabel-&gt;getScaleX();
    float lineWidth = theLabel-&gt;_maxLineWidth;

    bool breakLineWithoutSpace = theLabel-&gt;_lineBreakWithoutSpaces;
    Label::LetterInfo* info = nullptr;

    for (int j = 0; j+skip &lt; limit; j++)
    {            
        info = &amp; theLabel-&gt;_lettersInfo.at(j+skip);

        unsigned int justSkipped = 0;

        while (info-&gt;def.validDefinition == false)
        {
            justSkipped++;
            tIndex = j+skip+justSkipped;
            if (strWhole[tIndex-1] == '\n')
            {
                StringUtils::trimUTF16Vector(last_word);

                last_word.push_back('\n');
                multiline_string.insert(multiline_string.end(), last_word.begin(), last_word.end());
                last_word.clear();
                isStartOfWord = false;
                isStartOfLine = false;
                startOfWord = -1;
                startOfLine = -1;
            }
            if(tIndex &lt; limit)
            {
                info = &amp; theLabel-&gt;_lettersInfo.at( tIndex );
            }
            else
                break;
        }
        skip += justSkipped;
        tIndex = j + skip;

        if (tIndex &gt;= limit)
            break;

        char16_t character = strWhole[tIndex];

        if (!isStartOfWord)
        {
            startOfWord = info-&gt;position.x * scalsX;
            isStartOfWord = true;
        }

        if (!isStartOfLine)
        {
            startOfLine = startOfWord;
            isStartOfLine  = true;
        }

        // 1) Whitespace.
        // 2) This character is non-CJK, but the last character is CJK
        bool isspace = StringUtils::isUnicodeSpace(character);
        bool isCJK = false;
        if(!isspace)
        {
            isCJK = StringUtils::isCJKUnicode(character);
        }

        if (isspace ||
            (!last_word.empty() &amp;&amp; StringUtils::isCJKUnicode(last_word.back()) &amp;&amp; !isCJK))
        {
            // if current character is white space, put it into the current word
            if (isspace) last_word.push_back(character);

            multiline_string.insert(multiline_string.end(), last_word.begin(), last_word.end());
            last_word.clear();
            isStartOfWord = false;
            startOfWord = -1;
            // put the CJK character in the last word
            // and put the non-CJK(ASCII) character in the current word
            if (!isspace) last_word.push_back(character);

            continue;
        }

        float posRight = (info-&gt;position.x + info-&gt;def.xAdvance) * scalsX;
        // Out of bounds.
        if (posRight - startOfLine &gt; lineWidth)
        {
            if (!breakLineWithoutSpace &amp;&amp; !isCJK)
            {
                last_word.push_back(character);

                int found = StringUtils::getIndexOfLastNotChar16(multiline_string, ' ');
                if (found != -1)
                    StringUtils::trimUTF16Vector(multiline_string);
                else
                    multiline_string.clear();

                if (multiline_string.size() &gt; 0)
                    multiline_string.push_back('\n');

                isStartOfLine = false;
                startOfLine = -1;
            }
            else
            {
                StringUtils::trimUTF16Vector(last_word);

                //issue #8492:endless loop if not using system font, and constrained length is less than one character width
                if (isStartOfLine &amp;&amp; startOfWord == startOfLine &amp;&amp; last_word.size() == 0)
                    last_word.push_back(character);
                else
                    --j;

                last_word.push_back('\n');

                multiline_string.insert(multiline_string.end(), last_word.begin(), last_word.end());
                last_word.clear();

                isStartOfWord = false;
                isStartOfLine = false;
                startOfWord = -1;
                startOfLine = -1;
            }
        }
        else
        {
            // Character is normal.
            last_word.push_back(character);
        }
    }

    multiline_string.insert(multiline_string.end(), last_word.begin(), last_word.end());

    std::u16string strNew(multiline_string.begin(), multiline_string.end());

    theLabel-&gt;_currentUTF16String = strNew;
    theLabel-&gt;computeStringNumLines();
    theLabel-&gt;computeHorizontalKernings(theLabel-&gt;_currentUTF16String);

    return true;
}
</code></pre>

<h1>描边显示不均匀</h1>

<p>这是我们之前常常被美术大大们吐槽的地方：文字加描边后有的地方粗有的地方细，好蓝看啊&hellip;
后来本渣在网上看到大神的<a href="http://my.oschina.net/u/1414326/blog/279456?fromerr=xX53o9Rq">patch</a>，又自我扫盲了FreeType的基础概念，总算看懂了。cocos2d-x引擎在<code>FontFreeType::getGlyphBitmap</code>函数中会把不带描边的文字字形（glyph）和描边文字字形的bitmap都存到同一个数组里，在<code>FontFreeType::renderCharAt</code>中渲染。而描边文字字形是调用FreeType API生成的，其轮廓和不带描边的文字字形轮廓的间距并不能确保一定是我们所指定的描边大小，这个patch便是记下该间距和描边大小的offset，在拷贝bitmap时根据offset作调整。
其实cocos2d-x引擎在v3.2之后也改了这部分代码，但其实现思路却不如上述patch清晰，于是本渣便用了后者，并做了一点微小改动。</p>

<pre><code class="cpp">unsigned char* FontFreeType::getGlyphBitmap(unsigned short theChar, long &amp;outWidth, long &amp;outHeight, Rect &amp;outRect,int &amp;xAdvance)
{
    bool invalidChar = true;
    unsigned char * ret = nullptr;

    do 
    {
        if (!_fontRef)
            break;

        auto glyphIndex = FT_Get_Char_Index(_fontRef, theChar);
        if(!glyphIndex)
            break;

        if (_distanceFieldEnabled)
        {
            if (FT_Load_Glyph(_fontRef,glyphIndex,FT_LOAD_RENDER | FT_LOAD_NO_HINTING | FT_LOAD_NO_AUTOHINT))
                break;
        }
        else
        {
            if (FT_Load_Glyph(_fontRef,glyphIndex,FT_LOAD_RENDER | FT_LOAD_NO_AUTOHINT))
                break;
        }

        outRect.origin.x    = _fontRef-&gt;glyph-&gt;metrics.horiBearingX &gt;&gt; 6;
        outRect.origin.y    = - (_fontRef-&gt;glyph-&gt;metrics.horiBearingY &gt;&gt; 6);
        outRect.size.width  =   (_fontRef-&gt;glyph-&gt;metrics.width  &gt;&gt; 6);
        outRect.size.height =   (_fontRef-&gt;glyph-&gt;metrics.height &gt;&gt; 6);

        xAdvance = (static_cast&lt;int&gt;(_fontRef-&gt;glyph-&gt;metrics.horiAdvance &gt;&gt; 6));

        outWidth  = _fontRef-&gt;glyph-&gt;bitmap.width;
        outHeight = _fontRef-&gt;glyph-&gt;bitmap.rows;
        ret = _fontRef-&gt;glyph-&gt;bitmap.buffer;

        // apply patch from: http://my.oschina.net/u/1414326/blog/279456?fromerr=xX53o9Rq
        if (_outlineSize &gt; 0)
        {
            auto copyBitmap = new unsigned char[outWidth * outHeight];
            memcpy(copyBitmap, ret, outWidth * outHeight * sizeof(unsigned char));

            long bitmapWidth;
            long bitmapHeight;
            FT_BBox bbox;
            auto outlineBitmap = getGlyphBitmapWithOutline(theChar, bbox);
            if(outlineBitmap == nullptr)
            {
                ret = nullptr;
                delete [] copyBitmap;
                break;
            }

            long glyphMinX = outRect.origin.x;
            long glyphMaxX = outRect.origin.x + outWidth;
            long glyphMinY = -outHeight - outRect.origin.y;
            long glyphMaxY = -outRect.origin.y;

            auto outlineMinX = bbox.xMin &gt;&gt; 6;
            auto outlineMaxX = bbox.xMax &gt;&gt; 6;
            auto outlineMinY = bbox.yMin &gt;&gt; 6;
            auto outlineMaxY = bbox.yMax &gt;&gt; 6;
            auto outlineWidth = outlineMaxX - outlineMinX;
            auto outlineHeight = outlineMaxY - outlineMinY;

            bitmapWidth = outlineMaxX - outlineMinX;
            bitmapHeight = outlineMaxY - outlineMinY;

            int offsetWidth = 0;
            int offsetHeight = 0;

            if(glyphMinX - outlineMinX != _outlineSize) {
                offsetWidth = glyphMinX - outlineMinX - _outlineSize;
            }
            if(outlineMaxY - glyphMaxY != _outlineSize) {
                offsetHeight = outlineMaxY - glyphMaxY - _outlineSize;
            }

            long index;
            auto blendImage = new unsigned char[bitmapWidth * bitmapHeight * 2];
            memset(blendImage, 0, bitmapWidth * bitmapHeight * 2);
            for (int x = 0; x &lt; bitmapWidth; ++x)
            {
                for (int y = 0; y &lt; bitmapHeight; ++y)
                {
                    index = x + y * bitmapWidth;
                    blendImage[2 * index] = outlineBitmap[index];
                }
            }

            long maxX = outWidth + _outlineSize;
            long maxY = outHeight + _outlineSize;
            for (int x = _outlineSize + offsetWidth; x &lt; maxX + offsetWidth &amp; x &lt; bitmapWidth; ++x)
            {
                for (int y = _outlineSize + offsetHeight; y &lt; maxY + offsetHeight &amp; y &lt; bitmapHeight; ++y)
                {
                    index = x + y * bitmapWidth;
                    long index2 = x - _outlineSize - offsetWidth + (y - _outlineSize - offsetHeight) * outWidth;
                    blendImage[2 * index + 1] = copyBitmap[index2];
                }
            }

            outRect.origin.x = bbox.xMin &gt;&gt; 6;
            outRect.origin.y = - (bbox.yMax &gt;&gt; 6);

            xAdvance += bitmapWidth - outRect.size.width;

            outRect.size.width  =  bitmapWidth;
            outRect.size.height =  bitmapHeight;
            outWidth  = bitmapWidth;
            outHeight = bitmapHeight;

            delete [] outlineBitmap;
            delete [] copyBitmap;
            ret = blendImage;
        }

        invalidChar = false;
    } while (0);

    if (invalidChar)
    {
        outRect.size.width  = 0;
        outRect.size.height = 0;
        xAdvance = 0;

        return nullptr;
    }
    else
    {
       return ret;
    }
}
</code></pre>

<h1>其他</h1>

<p>由于v3.2的Label实现质量不高，所以还是得时时关注cocos2d-x引擎这方面的改动。例如前段时间便apply了上游的这个patch：</p>

<pre><code>@@ -154,13 +154,15 @@ bool FontFreeType::createFontObject(const std::string &amp;fontName, int fontSize)

 FontFreeType::~FontFreeType()
 {
-    if (_stroker)
-    {
-        FT_Stroker_Done(_stroker);
-    }
-    if (_fontRef)
-    {
-        FT_Done_Face(_fontRef);
+    if (_FTInitialized) {
+        if (_stroker)
+        {
+            FT_Stroker_Done(_stroker);
+        }
+        if (_fontRef)
+        {
+            FT_Done_Face(_fontRef);
+        }
     }

     s_cacheFontData[_fontName].referenceCount -= 1;
</code></pre>
]]></content>
  </entry>
  
</feed>
