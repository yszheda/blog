<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tmux | Galoisplusplus]]></title>
  <link href="http://yszheda.github.io/blog/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://yszheda.github.io/blog/"/>
  <updated>2020-05-08T19:38:26+08:00</updated>
  <id>http://yszheda.github.io/blog/</id>
  <author>
    <name><![CDATA[Galoisplusplus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Take Tmux Snapshots Automatically (2)]]></title>
    <link href="http://yszheda.github.io/blog/blog/2016/08/07/take-tmux-snapshots-automatically-2/"/>
    <updated>2016-08-07T16:12:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2016/08/07/take-tmux-snapshots-automatically-2</id>
    <content type="html"><![CDATA[<p>还记得本渣以前写的<a href="http://galoisplusplus.coding.me/blog/2014/02/23/take-tmux-snapshots-automatically/">给tmux现场做备胎的脚本</a>吗？其实后来本渣就没再去拓展<a href="https://gist.github.com/yszheda/9138288">这个脚本</a>了，不是因为之前的脚本运行得够好不需要再改了，而是在写好那个脚本那年，有一个工具横空出世，让本渣觉得再也不用造轮子了——好了，不卖关子了，这个工具就是<code>tmux</code>的<a href="https://github.com/tmux-plugins/tmux-resurrect">resurrect插件</a>！</p>

<p>resurrect官方有一个<a href="https://vimeo.com/104763018">使用录屏</a></p>

<iframe src="https://player.vimeo.com/video/104763018" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/104763018">Tmux Resurrect plugin</a> from <a href="https://vimeo.com/brunosutic">Bruno Sutic</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


<p>怎么样？狂拽酷炫屌！我们想要有的功能基本都有了吧！而且resurrect还部分支持<a href="https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_programs.md">恢复panel里运行的程序</a>啊有木有！要知道这并不好实现，以前本渣写备胎脚本时也折腾过，当时还只能在恢复panel时给出上次运行程序的提示。
不过resurrect插件需要手动保存和恢复<code>tmux</code>现场，如果需要自动化的话，可以再配合<a href="https://github.com/tmux-plugins/tmux-continuum">continuum插件</a>来使用。</p>

<p>好了，软文就写到这么多了，下面我们来看看如何安装使用。</p>

<p>首先查看<code>tmux</code>版本：</p>

<pre><code>tmux -V
</code></pre>

<p>resurrect插件需要<code>tmux</code>1.9以上的版本。如果你的版本低于1.9，那么升级是必须的，其实把<code>tmux</code>升级到1.9以上还是蛮推荐的。</p>

<p>这里推荐安装<a href="https://github.com/tmux-plugins/tpm">tpm (Tmux Plugin Manager)</a>做<code>tmux</code>插件管理，再通过<code>tpm</code>安装continuum等插件：</p>

<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
</code></pre>

<p>编辑<code>~/.tmux.conf</code>，在文件末尾加入以下几行:</p>

<pre><code># Set default shell to zsh
# set-option -g default-shell /bin/zsh

# Use the following line to fix OS X tmux problems
# set-option -g default-command "reattach-to-user-namespace -l zsh"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Enable automatic restore
set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
</code></pre>

<p>如果你的默认shell是<code>zsh</code>，请把这句的注释去掉：</p>

<pre><code>set-option -g default-shell /bin/zsh
</code></pre>

<p>如果你用的是Mac OSX，把这句的注释也去掉：</p>

<pre><code>set-option -g default-command "reattach-to-user-namespace -l zsh"
</code></pre>

<p>这主要是<code>tmux</code>在OSX下水土不服（更详细的问题描述可以看这篇文章：<a href="http://www.economyofeffort.com/2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes/">Reattach-to-user-namespace: The Fix for Your Tmux in OS X Woes</a>），需要用<a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard">reattach-to-user-namespace</a>黑科技，所以你最好也用<a href="http://www.macports.org"><em>MacPorts</em></a>或者<a href="http://brew.sh"><em>Homebrew</em></a>装下这个工具：</p>

<pre><code>port install tmux-pasteboard
</code></pre>

<pre><code>brew install reattach-to-user-namespace
</code></pre>

<p>在终端下执行以下命令更新<code>tmux</code>配置，运行<code>tpm</code>：
<code>
tmux source ~/.tmux.conf
</code></p>

<p>最后在<code>tmux</code>下运行<code>prefix + I</code>（如果你没改键绑定的话就是<code>&lt;Ctrl&gt;-b + &lt;Shift&gt;-i</code>）安装插件。你还可以通过<code>prefix + U</code>（<code>&lt;Ctrl&gt;-b + &lt;Shift&gt;-u</code>）更新插件，用<code>prefix + &lt;Alt&gt; + u</code>删除插件。</p>

<p>安装完成之后，你可以在<code>~/.tmux/plugins/</code>里找到每个插件的代码目录。resurrect插件还有一个<code>run_tests</code>脚本用于检查是否安装正确，不过要运行这个脚本需要装上虚拟化神器<a href="https://www.vagrantup.com">vagrant</a>。</p>

<p>如果安装正确，continuum插件会每隔15分钟产生一份备胎，我们也可以用<code>prefix + &lt;Ctrl&gt;-s</code>手动备份，用<code>prefix + &lt;Ctrl&gt;-r</code>手动恢复——vimer吐槽一记，这热键定义得好emacs风&hellip;</p>

<p>下面我们来看看resurrect插件产生的<code>tmux</code>环境备胎。在<code>tmux</code>环境备胎生成之后，在<code>~/.tmux/resurrect/</code>目录下就会有名为<code>tmux_resurrect_$(date).txt</code>的文本文件，同时会有一个叫<code>last</code>的软链接指向最新的<code>tmux_resurrect_$(date).txt</code>。那么这个神秘的txt文件里有啥呢？这里本渣随意贴上一份：</p>

<pre><code>pane    0       0       :apt-fast       1       :*      0       :/home/ys    1       sudo  :sudo apt-fast install linux-image-3.13.0-70-generic-dbgsym
pane    0       1       :~      0       :       0       :/home/ys    1       zsh     :
pane    0       2       :~      0       :-      0       :/home/ys    1       zsh     :
window  0       0       1       :*      c51d,95x28,0,0,0
window  0       1       0       :       c51e,95x28,0,0,1
window  0       2       0       :-      c51f,95x28,0,0,2
state   0
</code></pre>

<p>啊哈，看起来思路和本渣<a href="https://gist.github.com/yszheda/9138288">之前脚本</a>的<a href="http://galoisplusplus.coding.me/blog/2014/02/23/take-tmux-snapshots-automatically/">思路</a>差不多嘛！只不过resurrect插件记录的信息更详细，还做了键绑定。resurrect的代码也不难懂，如果你对它的实现感兴趣的话可以去阅读一下啦～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Tmux Snapshots Automatically]]></title>
    <link href="http://yszheda.github.io/blog/blog/2014/02/23/take-tmux-snapshots-automatically/"/>
    <updated>2014-02-23T16:12:00+08:00</updated>
    <id>http://yszheda.github.io/blog/blog/2014/02/23/take-tmux-snapshots-automatically</id>
    <content type="html"><![CDATA[<p>前段时间学校的EECS楼发生火灾，最近隔三差五停电检修，打断我在server上跑的实验。
而且我习惯上用tmux开多个session和window，一遇到停电我的tmux现场就悲剧了。
复电重开机之后要把tmux现场手动重新建好也很麻烦，于是我就挤出一点时间琢磨着写个简单的script去自动保存和重载tmux的副本。</p>

<!-- more -->


<p>首先我对tmux现场的定义其实还蛮简单的——我希望能记录tmux的session和window的名称、每个pane当前在什么路径以及在跑什么程序。
这些在tmux的man page中都有相应的内建变量（Variable）可以提供，这里谨列举如下：</p>

<table border="1" table-layout:fixed>
    <tr>
        <td> session_name </td>
        <td> Name of session </td>
    </tr>
    <tr>
        <td> window_name </td>
        <td> Name of windown </td>
    </tr>
    <tr>
        <td> pane_current_path </td>
        <td> Current path if available </td>    
    </tr>
    <tr>
        <td> pane_current_command </td>
        <td> Current command if available </td>
    </tr>
</table>


<p>有了这么给力的内建变量，我们很快就可以写出保存tmux现场的命令了：
<code>
$ tmux list-windows -a -F"#{session_name} #{window_name} #{pane_current_command} #{pane_current_path}"
</code></p>

<p>简单解释一下，tmux的<code>list-windows</code>命令顾名思义就是列举窗口，其后可以接以下参数：
<code>
list-windows [-a] [-F format]  [-t target-session]
</code>
[-a]自然是指所有窗口；[-F]指定输出格式，我上面那条命令是依次列出session名、window名、pane当前执行程序和pane当前路径，并以空格隔开；[-t]指定输出在哪个session，默认是当前的session，这里我没有用，反正输出结果最后是要被重定向到文件的。</p>

<p>那么有了tmux现场的snapshot之后，我们应该如何恢复现场呢？</p>

<p>首先当然是解析snapshot中的信息，得到\${session_name}、\${window_name}、\${pane_current_command}、\${pane_current_path}的信息。</p>

<p>接下来是把各个session和window恢复好。</p>

<p>tmux稍显繁琐的地方是：用<code>new-window</code>创建新的window时必须指定现有的session，假如session不存在，该命令不会创建session，而会报错结束。
所以，当我们恢复每次恢复一个window时，需要先知道它所在的session是否存在：如果存在，则用<code>new-window</code>直接在该session上创建window；如果不存在，则需要用<code>new-session</code>来创建session，session创建后会有一个默认的窗口，我们就把所要恢复的窗口的环境设定到默认窗口上。</p>

<p>判断session是否存在可以用tmux的<code>has-session</code>命令：
<code>
has-session [-t target-session]
                   (alias: has)
             Report an error and exit with 1 if the specified session does not exist.  If it does exist,
             exit with 0.
</code>
如果session存在，上述命令的退出码为0，否则则为1。这在bash中只需执行：
<code>
$ tmux has-session -t "${session_name}" 2&gt;/dev/null
</code>
之后判断<code>$?</code>即可。</p>

<p>假如session不存在，则我用以下命令创建新session，并设默认窗口名为当前所要恢复的窗口的名称：
<code>
$ tmux new-session -d -s "${session_name}" -n ${window_name}
</code></p>

<p>假如session已存在，则我用以下命令在该session上恢复原来的窗口：
<code>
$ tmux new-window -d -t ${session_name} -n "${window_name}"
</code></p>

<p>下面我们要让每个pane都回到原来的路径，我的想法是直接把一个<code>cd</code>的shell命令送到当前的pane，并执行这条命令。
在tmux中的解决方案稍微有点小技巧，关键是用<code>send-keys</code>命令把该shell命令和一个ENTER送到该窗口，这种方式就像直接在窗口输入上述shell命令再按回车键执行。
以下是跳转回原来路径的tmux完整命令：
<code>
$ tmux send-keys -t "${session_name}:${window_name}" "cd ${pane_current_path}" ENTER
</code></p>

<p>恢复每个pane原来在执行的命令也可以用上述同样的方法。
可惜的是，tmux尽管提供了\${pane_current_command}的内建变量，但这个变量却无法提供精确的信息。例如执行的命令是类似<code>exe arg1 arg2</code>带参数的形式，\${pane_current_command}只会给出<code>exe</code>而无法检测到任何参数。因此，当我们重载tmux现场时直接执行\${pane_current_command}可能会带来问题。我采取的方案很简单，在每个终端窗口用\${pane_current_command}给一个提示，让使用者自行判断恢复后应该执行什么命令。
给出提示的tmux命令可以和之前恢复原路径的命令合并在一起：
<code>
$ tmux send-keys -t "${session_name}:${window_name}" "cd ${pane_current_path}; echo \"Hint: last time you are executing '${pane_current_command}'.\"" ENTER
</code></p>

<p>最后，我想把这个script加到crontab中，所以我需要让它自动判断当前应该做snapshots还是从snapshots恢复tmux现场。
我采用的方式也比较简单，通过<code>ps</code>看看当前有没有<code>tmux</code>进程：没有的话说明需要恢复，此时先执行<code>tmux start-server</code>；有的话则进行snapshots的保存。</p>

<p>完整的脚本如下（或者参考我的<a href="https://gist.github.com/yszheda/9138288">gist</a>）：
<figure class='code'><figcaption><span> (tmuxEnvSaver.sh)</span> <a href='/downloads/code/tmuxEnvSaver.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">tmuxSnapshot</span><span class="o">=</span>/.tmux_snapshot
</span><span class='line'><span class="nv">tmuxEXE</span><span class="o">=</span>/usr/local/bin/tmux
</span><span class='line'>save_snap<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> list-windows -a -F<span class="s2">&quot;#{session_name} #{window_name} #{pane_current_command} #{pane_current_path}&quot;</span> &gt; <span class="k">${</span><span class="nv">tmuxSnapshot</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>restore_snap<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> start-server
</span><span class='line'>        <span class="k">while</span> <span class="nv">IFS</span><span class="o">=</span><span class="s1">&#39; &#39;</span> <span class="nb">read</span> -r session_name window_name pane_current_command pane_current_path
</span><span class='line'>        <span class="k">do</span>
</span><span class='line'>                <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> has-session -t <span class="s2">&quot;${session_name}&quot;</span> 2&gt;/dev/null
</span><span class='line'>                <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span>
</span><span class='line'>                <span class="k">then</span>
</span><span class='line'>                        <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> new-session -d -s <span class="s2">&quot;${session_name}&quot;</span> -n <span class="k">${</span><span class="nv">window_name</span><span class="k">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                        <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> new-window -d -t <span class="k">${</span><span class="nv">session_name</span><span class="k">}</span> -n <span class="s2">&quot;${window_name}&quot;</span>
</span><span class='line'>                <span class="k">fi</span>
</span><span class='line'>                <span class="k">${</span><span class="nv">tmuxEXE</span><span class="k">}</span> send-keys -t <span class="s2">&quot;${session_name}:${window_name}&quot;</span> <span class="s2">&quot;cd ${pane_current_path}; echo \&quot;Hint: last time you are executing &#39;${pane_current_command}&#39;.\&quot;&quot;</span> ENTER
</span><span class='line'>        <span class="k">done</span> &lt; <span class="k">${</span><span class="nv">tmuxSnapshot</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>ps aux<span class="p">|</span>grep -w tmux<span class="p">|</span>grep -v grep
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>        restore_snap
</span><span class='line'><span class="k">else</span>
</span><span class='line'>        save_snap
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我设了如下的crontab：
<code>
* * * * * echo "`date`: tmuxEnvSaver is running" &gt;&gt; /tmp/cron-tmux.log 2&gt;&amp;1
* * * * * /home/shuai/tmuxEnvSaver.sh &gt;&gt; /tmp/cron-tmux.log 2&gt;&amp;1
@reboot /home/shuai/tmuxEnvSaver.sh &gt;&gt; /tmp/cron-tmux.log 2&gt;&amp;1
</code></p>

<p>这样就可以自动保存和重载简单的tmux现场了。</p>

<p>当然，tmux还有很多内建变量，因此这个简单的脚本还可以继续改进，让snapshots的信息更丰富，偶还是等下次有空再折腾吧XD</p>

<h2>后续</h2>

<p>我搜到一些相关的文章，有用perl来写类似脚本的，可供大家参考：</p>

<p>[1]<a href="http://blog.edsantiago.com/articles/tmux-session-preserve/">Preserving (some) session state with tmux and bash</a></p>

<p>[2]<a href="http://brainscraps.wikia.com/wiki/Resurrecting_tmux_Sessions_After_Reboot">Resurrecting tmux Sessions After Reboot</a></p>
]]></content>
  </entry>
  
</feed>
